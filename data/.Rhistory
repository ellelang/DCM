rm(list = ls())
setwd("C:/Users/langzx/Desktop/github/DCM/survey/data")
library(psych)
library(GPArotation)
library(dplyr)
library(sem)
#library(lavaan)
#library(semPlot)
data <- read.csv ("data_number.csv", head = TRUE)
helper <- read.csv ("data_helper.csv", head = TRUE)
groupID <- unique(helper$Grouping)
resid <- data$respondentid
head(data)
# Get the question ID (column names)
## Questions related to ecosystem services
question_eco <- helper %>%
filter(Grouping == "Concern_Ecosystem Services" |
Grouping == "ModerateImprove_Ecosystem Services" |
Grouping == "MajorImprove_Ecosystem Services"|
#Grouping == "Indicate degree to which you agree"|
Grouping == "Outdoor activities"|
Grouping == "Environmental issues" |
Grouping == "Pollution notification"
) %>%
select(QuestionID) %>%
sapply(as.character) %>%
as.vector
length(question_eco)
## Questions related to Land management practices
question_LM <- helper %>%
filter(Grouping == "wetland_LM opinions" |
Grouping == "cc_LM opinions" |
Grouping == "nm_LM opinions"|
#Grouping == "Responsibility"|
#Grouping == "Indicate degree to which you agree"|
Grouping == "LM practices"
) %>%
select(QuestionID) %>%
sapply(as.character) %>%
as.vector
length(question_LM)
## Questions related to conservation values
question_value <- helper %>%
filter(Grouping == "Indicate degree to which you agree"|
Grouping == "Responsibility"|
Grouping == "25 by 25 goal"
) %>%
select(QuestionID) %>%
sapply(as.character) %>%
as.vector
length(question_value)
head(question_value)
colnames(factor_data)
col.names(factor_data)
colnames(factor_data)
##Get the subset of data
###factor data : exclude the choice experiments and demorgraphics info
factor_data = data[12:126]
colnames(factor_data)
##Correlation and eigenvalues
cor_eigen <- function(data){
factor_cor <- cor(data, use = "pairwise.complete.obs")
eigenvals <- eigen (factor_cor)
#### A general rule is that the eigenvalues greater than one represent meaningful factors
nfactors <- sum(eigenvals$values >= 1)
return (nfactors)
}
n_least_all <- cor_eigen(factor_data)
n_least_all
EFAfun <- function (data, nleast){
factorlist <- c(seq(nleast, nleast+5, 1))
TLIvec <- c()
RMSEAvec <- c()
BICvec <- c()
for (n in factorlist){
EFA_fa <- fa(data, nfactors = n)
TLIvec <- c(TLIvec, EFA_fa$TLI)
RMSEAvec <- c(RMSEAvec, EFA_fa$RMSEA[1])
BICvec <-  c( BICvec, EFA_fa$BIC)
}
res <- data.frame(N = factorlist, TLI = TLIvec, RMSEA = RMSEAvec,  BIC = BICvec)
return (res)
}
#EFA_fa <- fa(data, nfactors = factorlist[i])
EFAfun(factordata, n_least_all) # choose n of factors = 28
EFAfun <- function (data, nleast){
factorlist <- c(seq(nleast, nleast+5, 1))
TLIvec <- c()
RMSEAvec <- c()
BICvec <- c()
for (n in factorlist){
EFA_fa <- fa(data, nfactors = n)
TLIvec <- c(TLIvec, EFA_fa$TLI)
RMSEAvec <- c(RMSEAvec, EFA_fa$RMSEA[1])
BICvec <-  c( BICvec, EFA_fa$BIC)
}
res <- data.frame(N = factorlist, TLI = TLIvec, RMSEA = RMSEAvec,  BIC = BICvec)
return (res)
}
EFAfun(factordata, n_least_all) # choose n of factors = 28
EFAfun(factor_data, n_least_all) # choose n of factors = 28
EFA_all<- fa(factor_data, nfactors = 3)
EFA_all<- fa(factor_data, nfactors = 3)
EFA_all$loadings
EFA_all<- fa(factor_data, nfactors = 4)
EFA_all$loadings
EFA_all<- fa(factor_data, nfactors = 5)
EFA_all$loadings
EFA_all<- fa(factor_data, nfactors = 2)
EFA_all$loadings
fa.diagram(EFA_all,cut=.3,digits=2)
EFA_all<- fa(factor_data, nfactors = 3)
EFA_all$loadings
fa.diagram(EFA_all,cut=.3,digits=2)
EFA_all<- fa(factor_data, nfactors = 2)
EFA_all$loadings
fa.diagram(EFA_all,cut=.3,digits=2)
EFA_all<- fa(factor_data, nfactors = 5)
EFA_all$loadings
fa.diagram(EFA_all,cut=.3,digits=2)
EFA_all<- fa(factor_data, nfactors = 3)
EFA_all$loadings
fa.diagram(EFA_all,cut=.3,digits=2)
EFA_all<- fa(factor_data, nfactors = 2)
EFA_all$loadings
fa.diagram(EFA_all,cut=.3,digits=2)
fa.parallel(factor_data, fa="pc", n.iter=100,
show.legend=FALSE, main="Scree plot with parallel analysis")
factor_data[!is.na(factor_data)]
# factor_data[!is.na(factor_data)]
### three subsets based on question groups
eco_factordata <- factor_data %>% select (question_eco)
LM_factordata <- factor_data %>% select(question_LM)
VL_factordata <- factor_data %>% select(question_value)
fa.parallel(eco_factordata, fa="pc", n.iter=100,
show.legend=FALSE, main="Scree plot with parallel analysis")
LM_factordata <- factor_data %>% select(question_LM)
VL_factordata <- factor_data %>% select(question_value)
fa.parallel(LM_factordata, fa="pc", n.iter=100,
show.legend=FALSE, main="Scree plot with parallel analysis")
fa.parallel(VL_factordata, fa="pc", n.iter=100,
show.legend=FALSE, main="Scree plot with parallel analysis")
ecoVL_factordata <- factor_data %>% select(c(question_eco,question_value))
fa.parallel(ecoVL_factordata, fa="pc", n.iter=100,
show.legend=FALSE, main="Scree plot with parallel analysis")
fa.parallel(ecoVL_factordata, fa="both", n.iter=100,
show.legend=FALSE, main="Scree plot with parallel analysis")
fa.parallel(factor_data, fa="both", n.iter=100,
show.legend=FALSE, main="Scree plot with parallel analysis")
fa.parallel(eco_factordata, fa="both", n.iter=100,
show.legend=FALSE, main="Scree plot with parallel analysis")
fa.varimax_eco <- fa(eco_factordata, nfactors = 2, rotate = "varimax", fm = "pa")
fa.varimax_eco
fa.varimax_all <- fa(factor_data, nfactors = 2, rotate = "varimax", fm = "pa")
fa.varimax_all
fa.varimax_LM <- fa(LM_factordata, nfactors = 2, rotate = "varimax", fm = "pa")
fa.varimax_LM
fa.varimax_LM <- fa(ecoVL_factordata, nfactors = 2, rotate = "varimax", fm = "pa")
fa.varimax_LM
fa.varimax_ecoVL <- fa(ecoVL_factordata, nfactors = 2, rotate = "varimax", fm = "pa")
fa.varimax_ecoVL
fa.varimax_ecoVL <- fa(ecoVL_factordata, nfactors = 2, rotate = "promax", fm = "pa")
fa.varimax_ecoVL
fa.varimax_ecoVL <- fa(ecoVL_factordata, nfactors = 2, rotate = "varimax", fm = "pa")
fa.varimax_ecoVL
scores_ecovl <- fa.varimax_ecoVL$weights
scores_ecovl
fa.varimax_ecoVL <- fa(ecoVL_factordata, nfactors = 2, rotate = "varimax", fm = "pa", score= TRUE)
fa.varimax_ecoVL
scores_ecovl <- fa.varimax_ecoVL$loadings
scores_ecovl
fscores(fa.varimax_ecoVL, data = ecoVL_factordata)
efa_ecovl_eq <- "
FA1: scenicconcern, scenicmoderate, scenicmajor,
habitatconcern, habitatmoderate,habitatmajor,
recreationconcern, recreationmoderate,recreationmajor,
sedimentconcern, sedimentmoderate, sedimentmajor,
nutrientconcern, nutrientmoderate, nutrientmajor,
valundueblame, valwaterimportant, vallandregulate,valwaterproblem,
valpaymentimportant, valinfluence, valtogether, valstaff,
sptlandowners, sptfarmmanager, sptrenters,sptgovstaff, sptmrbboard,
FA2: obssediment, obsnutrients, obsodor, obstrash,
obslackfish,obsunsafeswim, obscolor, obsunsafedrink,pollutionobs,
achike, acexplore, acbike, ackayak, acpicnic,achunt, acfish,achorseride, acgooffroading,acswim,
sptfarmmanager, sptrenters,sptgovstaff, sptmrbboard,familiar25
"
eq_syn_ecovl <- cfa(text = efa_ecovl_eq,
reference.indicators = FALSE)
efa_ecovl_eq <- "
FA1: scenicconcern, scenicmoderate, scenicmajor,
habitatconcern, habitatmoderate,habitatmajor,
recreationconcern, recreationmoderate,recreationmajor,
sedimentconcern, sedimentmoderate, sedimentmajor,
nutrientconcern, nutrientmoderate, nutrientmajor,
valundueblame, valwaterimportant, vallandregulate,valwaterproblem,
valpaymentimportant, valinfluence, valtogether, valstaff,
sptlandowners, sptfarmmanager, sptrenters,sptgovstaff, sptmrbboard
FA2: obssediment, obsnutrients, obsodor, obstrash,
obslackfish,obsunsafeswim, obscolor, obsunsafedrink,pollutionobs,
achike, acexplore, acbike, ackayak, acpicnic,achunt, acfish,achorseride, acgooffroading,acswim,
sptfarmmanager, sptrenters,sptgovstaff, sptmrbboard,familiar25
"
eq_syn_ecovl <- cfa(text = efa_ecovl_eq,
reference.indicators = FALSE)
CFA_ecovl <- sem(eq_syn_ecovl, data = ecoVL_factordata)
efa_ecovl_eq <- "
FA1: scenicconcern, scenicmoderate, scenicmajor,
habitatconcern, habitatmoderate,habitatmajor,
recreationconcern, recreationmoderate,recreationmajor,
sedimentconcern, sedimentmoderate, sedimentmajor,
nutrientconcern, nutrientmoderate, nutrientmajor,
valundueblame, valwaterimportant, vallandregulate,valwaterproblem,
valpaymentimportant, valinfluence, valtogether, valstaff,
sptlandowners, sptfarmmanager, sptrenters,sptgovstaff, sptmrbboard,
valknowconservation, valsteward
FA2: obssediment, obsnutrients, obsodor, obstrash,
obslackfish,obsunsafeswim, obscolor, obsunsafedrink,pollutionobs,
achike, acexplore, acbike, ackayak, acpicnic,achunt, acfish,achorseride, acgooffroading,acswim,
sptfarmmanager, sptrenters,sptgovstaff, sptmrbboard,familiar25
"
eq_syn_ecovl <- cfa(text = efa_ecovl_eq,
reference.indicators = FALSE)
CFA_ecovl <- sem(eq_syn_ecovl, data = ecoVL_factordata)
CFA_scores_ecovl <- fscores(CFA_ecovl, data = ecoVL_factordata)
CFA_scores_ecovl
CFA_scores_ecovl[!na(CFA_scores_ecovl),]
CFA_scores_ecovl[!is.na(CFA_scores_ecovl),]
CFA_scores_ecovl[!is.na(CFA_scores_ecovl)]
CFA_scores_ecovl[!is.na(CFA_scores_ecovl$FA1)]
CFA_scores_ecovl[!is.na(CFA_scores_ecovl[1])]
head(data)
df_CFA_scores_ecovl <- data.frame(CFA_scores_ecovl) %>% mutate (id = resid )
write.csv(x = df_CFA_scores_ecovl, file = "fscore_ecovl.csv", row.names = FALSE)
setwd("C:/Users/langzx/Desktop/github/DCM/data")
data_ecovl <- read.csv(file = "fscore_ecovl.csv")
colnames(data_eco)
colnames(data_ecovl)
df <- data_ecovl[,seq(1,8,1)]
data_wta <- read.csv("wta_fscores10202019.csv")
data_wta$id
colnames(data_ecovl)
data_wta <- data_wta %>% left_join(data_ecovl, by = c("id" = "id"))
write.csv(x =data_wta , file = "wta_cluster_01272020.csv", row.names = FALSE)
ncol(data_wta)
colnames(data_wta)
data_wta <- read.csv("wta_observables11192018COMB426.csv")
data_wta$id
data_wta <- data_wta %>% left_join(data_ecovl, by = c("id" = "id"))
write.csv(x =data_wta , file = "wta_cluster_01272020.csv", row.names = FALSE)
ncol(data_wta)
colnames(data_wta)
install.packages("ggfortify")
library(factoextra)
library(factoextra)
fa.varimax_ecoVL
library(ggbiplot)
install.packages("ggbiplot")
library(ggbiplot)
install_github("vqv/ggbiplot")
library(devtools)
install_github("vqv/ggbiplot", force = TRUE)
library(ggbiplot)
ecovl.pca <- prcomp(ecoVL_factordata, center = TRUE,scale. = TRUE)
df_impute <- sapply(ecoVL_factordata,function(x) {
if(is.numeric(x)) ifelse(is.na(x),median(x,na.rm=T),x) else x})
ecovl.pca <- prcomp(df_impute, center = TRUE,scale. = TRUE)
ecovl.pca
ggbiplot(ecovl.pca)
fsm <- function(oblique) {
if (class(oblique)[2]=="fa" & is.null(oblique$Phi)) {
warning("Object doesn't look like oblique EFA")
} else {
P <- unclass(oblique$loading)
F <- P %*% oblique$Phi
colnames(F) <- c("PA1", "PA2")
return(F)
}
}
fsm(fa.varimax_ecoVL)
fa.varimax_ecoVL <- fa(ecoVL_factordata, nfactors = 2, rotate = "varimax", fm = "pa", score= TRUE)
fa.varimax_ecoVL
fa.varimax_ecoVL <- fa(ecoVL_factordata, nfactors = 2, rotate = "varimax", fm = "pa")
class(fa.varimax_ecoVL[2])
fa.varimax_ecoVL$Phi
fa.varimax_ecoVL <- fa(ecoVL_factordata, nfactors = 2, rotate = "promax", fm = "pa")
class(fa.varimax_ecoVL[2])
fa.varimax_ecoVL$Phi
fsm <- function(oblique) {
if (class(oblique)[2]=="fa" & is.null(oblique$Phi)) {
warning("Object doesn't look like oblique EFA")
} else {
P <- unclass(oblique$loading)
F <- P %*% oblique$Phi
colnames(F) <- c("PA1", "PA2")
return(F)
}
}
fsm(fa.varimax_ecoVL)
fa.varimax_ecoVL <- fa(ecoVL_factordata, nfactors = 2, rotate = "varimax", fm = "pa")
class(fa.varimax_ecoVL[2])
fa.varimax_ecoVL$Phi
factor.plot(varimax_ecoVL, labels=rownames(varimax_ecoVL$loadings))
factor.plot(fa.varimax_ecoVL, labels=rownames(fa.varimax_ecoVL$loadings))
